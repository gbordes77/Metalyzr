{"ast":null,"code":"const API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:8000';class ApiService{async fetchApi(endpoint){try{const response=await fetch(`${API_BASE_URL}${endpoint}`);if(!response.ok){throw new Error(`HTTP error! status: ${response.status}`);}return await response.json();}catch(error){console.error(`API Error for ${endpoint}:`,error);throw error;}}// Health check\nasync healthCheck(){return this.fetchApi('/health');}// Tournaments\nasync getTournaments(params){const searchParams=new URLSearchParams();if(params!==null&&params!==void 0&&params.format)searchParams.set('format',params.format);if(params!==null&&params!==void 0&&params.limit)searchParams.set('limit',params.limit.toString());if(params!==null&&params!==void 0&&params.offset)searchParams.set('offset',params.offset.toString());const query=searchParams.toString();return this.fetchApi(`/api/tournaments/${query?`?${query}`:''}`);}async getTournament(id){return this.fetchApi(`/api/tournaments/${id}/`);}async getTournamentMetagame(id){return this.fetchApi(`/api/tournaments/${id}/metagame/`);}async getTournamentDecks(id,params){const searchParams=new URLSearchParams();if(params!==null&&params!==void 0&&params.archetype)searchParams.set('archetype',params.archetype);if(params!==null&&params!==void 0&&params.limit)searchParams.set('limit',params.limit.toString());const query=searchParams.toString();return this.fetchApi(`/api/tournaments/${id}/decks/${query?`?${query}`:''}`);}// Archetypes\nasync getArchetypes(params){const searchParams=new URLSearchParams();if(params!==null&&params!==void 0&&params.format)searchParams.set('format',params.format);if(params!==null&&params!==void 0&&params.category)searchParams.set('category',params.category);const query=searchParams.toString();return this.fetchApi(`/api/archetypes/${query?`?${query}`:''}`);}async getArchetype(id){return this.fetchApi(`/api/archetypes/${id}/`);}async getArchetypeDecks(id,limit){const query=limit?`?limit=${limit}`:'';return this.fetchApi(`/api/archetypes/${id}/decks/${query}`);}async getFormats(){// Extraire les formats depuis les archétypes\nconst archetypes=await this.getArchetypes();return Array.from(new Set(archetypes.map(a=>a.format)));}async getCategories(){// Extraire les catégories depuis les archétypes\nconst archetypes=await this.getArchetypes();return Array.from(new Set(archetypes.map(a=>a.category)));}}export const apiService=new ApiService();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}