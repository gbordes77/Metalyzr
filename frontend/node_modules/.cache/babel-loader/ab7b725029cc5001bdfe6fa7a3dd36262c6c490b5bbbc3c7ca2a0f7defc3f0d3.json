{"ast":null,"code":"// API réelle simple pour le MVP\nconst API_BASE = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// Interface pour les données réelles\n\n// API réelle avec gestion d'erreurs simple\nclass RealAPI {\n  async request(endpoint) {\n    try {\n      const response = await fetch(`${API_BASE}${endpoint}`, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      return response.json();\n    } catch (error) {\n      console.error(`API Error for ${endpoint}:`, error);\n      throw error;\n    }\n  }\n\n  // Méthodes API simples\n  async getStats() {\n    return this.request('/api/stats');\n  }\n  async getTournaments() {\n    return this.request('/api/tournaments');\n  }\n  async getArchetypes() {\n    return this.request('/api/archetypes');\n  }\n  async checkHealth() {\n    return this.request('/health');\n  }\n}\nexport const api = new RealAPI();","map":{"version":3,"names":["API_BASE","process","env","REACT_APP_API_URL","RealAPI","request","endpoint","response","fetch","headers","ok","Error","status","statusText","json","error","console","getStats","getTournaments","getArchetypes","checkHealth","api"],"sources":["/Users/guillaumebordes/Documents/Metalyzr /frontend/src/api/realAPI.ts"],"sourcesContent":["// API réelle simple pour le MVP\nconst API_BASE = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// Interface pour les données réelles\nexport interface Tournament {\n  id: number;\n  name: string;\n  format: string;\n  date: string;\n  participants: number;\n}\n\nexport interface Archetype {\n  id: number;\n  name: string;\n  description: string;\n  winRate: number;\n  popularity: number;\n}\n\nexport interface Stats {\n  tournaments: number;\n  archetypes: number;\n  decks: number;\n  lastUpdate: string;\n}\n\n// API réelle avec gestion d'erreurs simple\nclass RealAPI {\n  private async request<T>(endpoint: string): Promise<T> {\n    try {\n      const response = await fetch(`${API_BASE}${endpoint}`, {\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      return response.json();\n    } catch (error) {\n      console.error(`API Error for ${endpoint}:`, error);\n      throw error;\n    }\n  }\n\n  // Méthodes API simples\n  async getStats(): Promise<Stats> {\n    return this.request<Stats>('/api/stats');\n  }\n\n  async getTournaments(): Promise<Tournament[]> {\n    return this.request<Tournament[]>('/api/tournaments');\n  }\n\n  async getArchetypes(): Promise<Archetype[]> {\n    return this.request<Archetype[]>('/api/archetypes');\n  }\n\n  async checkHealth(): Promise<{ status: string; timestamp: string }> {\n    return this.request<{ status: string; timestamp: string }>('/health');\n  }\n}\n\nexport const api = new RealAPI(); "],"mappings":"AAAA;AACA,MAAMA,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;;AAEzE;;AAwBA;AACA,MAAMC,OAAO,CAAC;EACZ,MAAcC,OAAOA,CAAIC,QAAgB,EAAc;IACrD,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,QAAQ,GAAGM,QAAQ,EAAE,EAAE;QACrDG,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MAEF,IAAI,CAACF,QAAQ,CAACG,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,QAAQJ,QAAQ,CAACK,MAAM,KAAKL,QAAQ,CAACM,UAAU,EAAE,CAAC;MACpE;MAEA,OAAON,QAAQ,CAACO,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,iBAAiBT,QAAQ,GAAG,EAAES,KAAK,CAAC;MAClD,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAME,QAAQA,CAAA,EAAmB;IAC/B,OAAO,IAAI,CAACZ,OAAO,CAAQ,YAAY,CAAC;EAC1C;EAEA,MAAMa,cAAcA,CAAA,EAA0B;IAC5C,OAAO,IAAI,CAACb,OAAO,CAAe,kBAAkB,CAAC;EACvD;EAEA,MAAMc,aAAaA,CAAA,EAAyB;IAC1C,OAAO,IAAI,CAACd,OAAO,CAAc,iBAAiB,CAAC;EACrD;EAEA,MAAMe,WAAWA,CAAA,EAAmD;IAClE,OAAO,IAAI,CAACf,OAAO,CAAwC,SAAS,CAAC;EACvE;AACF;AAEA,OAAO,MAAMgB,GAAG,GAAG,IAAIjB,OAAO,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}