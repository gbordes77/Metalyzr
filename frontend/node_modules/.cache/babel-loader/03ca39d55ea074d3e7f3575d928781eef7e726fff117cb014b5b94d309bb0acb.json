{"ast":null,"code":"export class APIError extends Error{constructor(message,status,code){super(message);this.status=status;this.code=code;this.name='APIError';}}export async function fetchAPI(endpoint){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const{retries=3,retryDelay=1000,...fetchOptions}=options;const baseURL=process.env.REACT_APP_API_URL||'http://localhost:8000';const url=`${baseURL}${endpoint}`;let lastError=null;for(let attempt=0;attempt<retries;attempt++){try{const controller=new AbortController();const timeoutId=setTimeout(()=>controller.abort(),10000);// 10s timeout\nconst response=await fetch(url,{...fetchOptions,headers:{'Content-Type':'application/json',...fetchOptions.headers},signal:controller.signal});clearTimeout(timeoutId);// Gérer les réponses non-OK\nif(!response.ok){const errorData=await response.json().catch(()=>({}));throw new APIError(errorData.message||`HTTP ${response.status}`,response.status,errorData.code);}return await response.json();}catch(error){lastError=error;// Ne pas retry sur certaines erreurs\nif(error instanceof APIError&&[400,401,403,404].includes(error.status)){throw error;}// Attendre avant de retry (backoff exponentiel)\nif(attempt<retries-1){await new Promise(resolve=>setTimeout(resolve,retryDelay*Math.pow(2,attempt)));}}}throw lastError||new APIError('Erreur de connexion au serveur');}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}