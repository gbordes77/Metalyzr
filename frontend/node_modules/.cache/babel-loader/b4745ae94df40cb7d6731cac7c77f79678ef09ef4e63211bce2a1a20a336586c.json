{"ast":null,"code":"import{useState,useEffect,useCallback}from'react';import{apiService}from'../services/api';export function useTournaments(params){const[data,setData]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const fetchData=useCallback(async()=>{try{setLoading(true);setError(null);const tournaments=await apiService.getTournaments(params);setData(tournaments);}catch(err){setError(err instanceof Error?err.message:'An error occurred');}finally{setLoading(false);}},[params===null||params===void 0?void 0:params.format,params===null||params===void 0?void 0:params.limit,params===null||params===void 0?void 0:params.offset]);useEffect(()=>{fetchData();},[fetchData]);return{data,loading,error,refetch:fetchData};}export function useTournament(id){const[data,setData]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const fetchData=useCallback(async()=>{try{setLoading(true);setError(null);const tournament=await apiService.getTournament(id);setData(tournament);}catch(err){setError(err instanceof Error?err.message:'An error occurred');}finally{setLoading(false);}},[id]);useEffect(()=>{if(id){fetchData();}},[fetchData,id]);return{data,loading,error,refetch:fetchData};}export function useTournamentMetagame(id){const[data,setData]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const fetchData=useCallback(async()=>{try{setLoading(true);setError(null);const metagame=await apiService.getTournamentMetagame(id);setData(metagame);}catch(err){setError(err instanceof Error?err.message:'An error occurred');}finally{setLoading(false);}},[id]);useEffect(()=>{if(id){fetchData();}},[fetchData,id]);return{data,loading,error,refetch:fetchData};}export function useArchetypes(params){const[data,setData]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const fetchData=async()=>{try{setLoading(true);setError(null);const archetypes=await apiService.getArchetypes(params);setData(archetypes);}catch(err){setError(err instanceof Error?err.message:'An error occurred');}finally{setLoading(false);}};useEffect(()=>{fetchData();},[params===null||params===void 0?void 0:params.format,params===null||params===void 0?void 0:params.category]);return{data,loading,error,refetch:fetchData};}export function useFormats(){const[data,setData]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const fetchData=async()=>{try{setLoading(true);setError(null);const formats=await apiService.getFormats();setData(formats);}catch(err){setError(err instanceof Error?err.message:'An error occurred');}finally{setLoading(false);}};useEffect(()=>{fetchData();},[]);return{data,loading,error,refetch:fetchData};}export function useCategories(){const[data,setData]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const fetchData=useCallback(async()=>{try{setLoading(true);setError(null);const categories=await apiService.getCategories();setData(categories);}catch(err){setError(err instanceof Error?err.message:'An error occurred');}finally{setLoading(false);}},[]);useEffect(()=>{fetchData();},[fetchData]);return{data,loading,error,refetch:fetchData};}export function useTournamentDecks(tournamentId,params){const[data,setData]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const fetchData=useCallback(async()=>{try{setLoading(true);setError(null);const decks=await apiService.getTournamentDecks(tournamentId,params);setData(decks);}catch(err){setError(err instanceof Error?err.message:'An error occurred');}finally{setLoading(false);}},[tournamentId,params===null||params===void 0?void 0:params.archetype,params===null||params===void 0?void 0:params.limit]);useEffect(()=>{if(tournamentId){fetchData();}},[fetchData,tournamentId]);return{data,loading,error,refetch:fetchData};}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}