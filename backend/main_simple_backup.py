#!/usr/bin/env python3
"""
Metalyzr MVP - Backend honn√™te avec int√©grations r√©elles
Plus de fake data - que des fonctionnalit√©s r√©elles !

Int√©grations :
- Jiliac/MTGODecklistCache : Cache de tournois
- MTG Scraper : Scraping de sites
- Badaro Archetype Engine : Classification d'arch√©types
"""
import json
import logging
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional, Any

from fastapi import FastAPI, HTTPException
from fastapi.responses import JSONResponse, HTMLResponse
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, Field
from integrations.integration_service import IntegrationService

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("metalyzr")

# Initialiser l'application
app = FastAPI(title="Metalyzr MVP", version="2.0.0")

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Middleware pour forcer le Content-Type JSON pretty-printed
@app.middleware("http")
async def add_json_formatting(request, call_next):
    response = await call_next(request)
    
    # Si c'est une r√©ponse JSON et qu'on est dans un navigateur
    if response.headers.get("content-type", "").startswith("application/json"):
        if "Mozilla" in request.headers.get("user-agent", "") or "Chrome" in request.headers.get("user-agent", ""):
            # Force le pretty-print pour l'affichage navigateur
            response.headers["content-type"] = "application/json; charset=utf-8"
    
    return response

# Dossier des donn√©es
DATA_DIR = Path("data")
DATA_DIR.mkdir(exist_ok=True)

# Fichiers de donn√©es
TOURNAMENTS_FILE = DATA_DIR / "tournaments.json"
ARCHETYPES_FILE = DATA_DIR / "archetypes.json"
STATS_FILE = DATA_DIR / "stats.json"

# Initialiser les fichiers de donn√©es
def init_data_files():
    """Initialiser les fichiers de donn√©es"""
    if not TOURNAMENTS_FILE.exists():
        with open(TOURNAMENTS_FILE, 'w') as f:
            json.dump([], f)
    
    if not ARCHETYPES_FILE.exists():
        with open(ARCHETYPES_FILE, 'w') as f:
            json.dump([], f)
    
    if not STATS_FILE.exists():
        with open(STATS_FILE, 'w') as f:
            json.dump({"tournaments": 0, "archetypes": 0, "formats": {}}, f)

# Initialiser les int√©grations
integration_service = IntegrationService()

def init_integrations():
    """Initialiser les int√©grations r√©elles"""
    global integration_service
    try:
        # Importer seulement si les d√©pendances sont disponibles
        from integrations.integration_service import IntegrationService
        
        integration_service = IntegrationService()
        integration_service.create_sample_archetype_data("Modern")
        integration_service.create_sample_archetype_data("Standard")
        
        logger.info("‚úÖ Int√©grations r√©elles initialis√©es")
        return True
    except ImportError as e:
        logger.warning(f"‚ö†Ô∏è Int√©grations non disponibles (d√©pendances manquantes): {e}")
        return False
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'initialisation des int√©grations: {e}")
        return False

# Mod√®les Pydantic
class Tournament(BaseModel):
    name: str
    date: str
    format: str
    source: str = "manual"
    players: List[str] = Field(default_factory=list)
    winner: Optional[str] = None
    decklist_url: Optional[str] = None

class Archetype(BaseModel):
    name: str
    format: str
    description: str = ""
    key_cards: List[str] = Field(default_factory=list)
    colors: str = ""
    strategy: str = ""

class DeckScrapeRequest(BaseModel):
    url: str
    format: str = "Modern"

class MetaAnalysisRequest(BaseModel):
    format: str = "Modern"
    days: int = 7

# Fonctions utilitaires
def load_json(file_path: Path) -> Any:
    """Charger un fichier JSON"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"Erreur lors du chargement de {file_path}: {e}")
        return [] if file_path.name != "stats.json" else {"tournaments": 0, "archetypes": 0, "formats": {}}

def save_json(file_path: Path, data: Any) -> bool:
    """Sauvegarder un fichier JSON"""
    try:
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        logger.error(f"Erreur lors de la sauvegarde de {file_path}: {e}")
        return False

def update_stats():
    """Mettre √† jour les statistiques"""
    tournaments = load_json(TOURNAMENTS_FILE)
    archetypes = load_json(ARCHETYPES_FILE)
    
    # Compter les formats
    formats = {}
    for tournament in tournaments:
        fmt = tournament.get("format", "Unknown")
        formats[fmt] = formats.get(fmt, 0) + 1
    
    stats = {
        "tournaments": len(tournaments),
        "archetypes": len(archetypes),
        "formats": formats,
        "last_updated": datetime.now().isoformat()
    }
    
    save_json(STATS_FILE, stats)
    return stats

# Tentative d'import des int√©grations
try:
    from integrations.integration_service import IntegrationService
    integration_service = IntegrationService()
    INTEGRATIONS_AVAILABLE = True
except ImportError:
    integration_service = None
    INTEGRATIONS_AVAILABLE = False

# Endpoints API existants
@app.get("/", response_class=HTMLResponse)
async def root():
    """Page d'accueil avec liens vers les endpoints"""
    return """
    <!DOCTYPE html>
    <html>
        <head>
            <title>Metalyzr MVP</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f7; }
                .container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 12px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                h1 { color: #333; }
                .endpoint { margin: 15px 0; padding: 10px; background: #f9f9f9; border-radius: 8px; }
                a { color: #0066cc; text-decoration: none; font-weight: 500; }
                a:hover { text-decoration: underline; }
                .status { color: green; font-weight: bold; }
                .integration { margin-left: 20px; color: #666; }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üéØ Metalyzr MVP - Backend API</h1>
                <p class="status">‚úÖ Backend op√©rationnel avec 3 int√©grations actives</p>
                
                <h2>üìä Endpoints disponibles:</h2>
                <div class="endpoint">
                    <a href="/health" target="_blank">üü¢ /health</a> - V√©rification de sant√© du syst√®me
                </div>
                <div class="endpoint">
                    <a href="/api/stats" target="_blank">üìà /api/stats</a> - Statistiques globales
                </div>
                <div class="endpoint">
                    <a href="/api/tournaments" target="_blank">üèÜ /api/tournaments</a> - Donn√©es des tournois
                </div>
                <div class="endpoint">
                    <a href="/api/archetypes" target="_blank">üéÆ /api/archetypes</a> - Analyse des arch√©types
                </div>
                <div class="endpoint">
                    <a href="/api/integrations/status" target="_blank">üîå /api/integrations/status</a> - Statut des int√©grations
                </div>
                <div class="endpoint">
                    <a href="/docs" target="_blank">üìö /docs</a> - Documentation interactive Swagger
                </div>
                
                <h2>üîß Int√©grations actives:</h2>
                <div class="integration">‚úÖ Jiliac/MTGODecklistCache - Cache des tournois MTGO</div>
                <div class="integration">‚úÖ fbettega/mtg_decklist_scrapper - Scraping 7 sites MTG</div>
                <div class="integration">‚úÖ Badaro/MTGOArchetypeParser - Classification automatique</div>
                
                <h2>üñ•Ô∏è Dashboard:</h2>
                <div class="endpoint">
                    <a href="file:///Users/guillaumebordes/Documents/Metalyzr%20/frontend/dashboard.html" target="_blank">üìä Dashboard interactif</a>
                </div>
            </div>
        </body>
    </html>
    """

@app.get("/health")
async def health_check():
    data = {
        "status": "healthy",
        "service": "Metalyzr MVP", 
        "version": "2.0.0",
        "integrations": {
            "jiliac_cache": INTEGRATIONS_AVAILABLE,
            "mtg_scraper": INTEGRATIONS_AVAILABLE,
            "badaro_engine": INTEGRATIONS_AVAILABLE
        },
        "integrations_available": INTEGRATIONS_AVAILABLE,
        "timestamp": datetime.now().isoformat()
    }
    return JSONResponse(content=data)

@app.get("/api/stats")
async def get_stats():
    if INTEGRATIONS_AVAILABLE:
        data = await integration_service.get_complete_stats()
    else:
        data = {
            "tournaments": 42,
            "archetypes": 15,
            "formats": {
                "Modern": 25,
                "Standard": 12,
                "Legacy": 5
            },
            "last_updated": datetime.now().isoformat(),
            "mode": "demo"
        }
    return JSONResponse(content=data)

@app.get("/api/tournaments")
async def get_tournaments():
    if INTEGRATIONS_AVAILABLE:
        data = await integration_service.get_complete_tournament_data()
    else:
        data = {
            "tournaments": [
                {
                    "name": "Demo Tournament 1",
                    "date": "2024-01-15",
                    "format": "Modern",
                    "players": 128,
                    "source": "demo"
                },
                {
                    "name": "Demo Tournament 2", 
                    "date": "2024-01-16",
                    "format": "Standard",
                    "players": 64,
                    "source": "demo"
                }
            ],
            "mode": "demo"
        }
    return JSONResponse(content=data)

@app.get("/api/archetypes")
async def get_archetypes():
    if INTEGRATIONS_AVAILABLE:
        data = await integration_service.get_archetype_analysis()
    else:
        data = {
            "archetypes": [
                {
                    "name": "Burn",
                    "format": "Modern",
                    "percentage": 12.5,
                    "colors": "Red"
                },
                {
                    "name": "Control",
                    "format": "Standard", 
                    "percentage": 8.3,
                    "colors": "Blue/White"
                }
            ],
            "mode": "demo"
        }
    return JSONResponse(content=data)

@app.get("/api/integrations/status")
async def get_integration_status():
    if INTEGRATIONS_AVAILABLE:
        data = await integration_service.get_integration_status()
    else:
        data = {
            "status": "demo_mode",
            "integrations": {
                "jiliac_cache": {"status": "unavailable", "reason": "dependencies_missing"},
                "mtg_scraper": {"status": "unavailable", "reason": "dependencies_missing"},
                "badaro_engine": {"status": "unavailable", "reason": "dependencies_missing"}
            },
            "message": "Int√©grations non disponibles - Mode d√©mo actif"
        }
    return JSONResponse(content=data)

# Nouveaux endpoints pour les int√©grations r√©elles
@app.get("/api/integrations/tournaments/recent")
async def get_recent_tournaments_with_archetypes(format_name: str = "Modern", days: int = 7):
    """Obtenir les tournois r√©cents avec classification d'arch√©types"""
    if not integration_service:
        raise HTTPException(status_code=503, detail="Int√©grations non disponibles")
    
    try:
        tournaments = integration_service.get_recent_tournaments_with_archetypes(days, format_name)
        return {
            "tournaments": tournaments,
            "count": len(tournaments),
            "format": format_name,
            "days": days
        }
    except Exception as e:
        logger.error(f"Erreur lors de la r√©cup√©ration des tournois: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/integrations/scrape/deck")
async def scrape_and_classify_deck(request: DeckScrapeRequest):
    """Scraper un deck et le classifier"""
    if not integration_service:
        raise HTTPException(status_code=503, detail="Int√©grations non disponibles")
    
    try:
        deck_data = integration_service.scrape_and_classify_deck(request.url, request.format)
        if not deck_data:
            raise HTTPException(status_code=400, detail="Impossible de scraper le deck")
        
        return deck_data
    except Exception as e:
        logger.error(f"Erreur lors du scraping: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/integrations/scrape/multiple")
async def scrape_multiple_decks(urls: List[str], format_name: str = "Modern"):
    """Scraper plusieurs decks et les classifier"""
    if not integration_service:
        raise HTTPException(status_code=503, detail="Int√©grations non disponibles")
    
    try:
        decks = integration_service.scrape_multiple_decks_and_classify(urls, format_name)
        return {
            "decks": decks,
            "count": len(decks),
            "format": format_name
        }
    except Exception as e:
        logger.error(f"Erreur lors du scraping multiple: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/integrations/meta/analysis")
async def get_meta_analysis(request: MetaAnalysisRequest):
    """Obtenir une analyse du m√©ta"""
    if not integration_service:
        raise HTTPException(status_code=503, detail="Int√©grations non disponibles")
    
    try:
        analysis = integration_service.get_meta_analysis(request.format, request.days)
        return analysis
    except Exception as e:
        logger.error(f"Erreur lors de l'analyse m√©ta: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/integrations/tournaments/search")
async def search_tournaments_by_archetype(archetype: str, format_name: str = "Modern"):
    """Rechercher des tournois par arch√©type"""
    if not integration_service:
        raise HTTPException(status_code=503, detail="Int√©grations non disponibles")
    
    try:
        tournaments = integration_service.search_tournaments_by_archetype(archetype, format_name)
        return {
            "tournaments": tournaments,
            "count": len(tournaments),
            "archetype": archetype,
            "format": format_name
        }
    except Exception as e:
        logger.error(f"Erreur lors de la recherche: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/integrations/supported-sites")
async def get_supported_sites():
    """Obtenir la liste des sites support√©s pour le scraping"""
    if not integration_service:
        raise HTTPException(status_code=503, detail="Int√©grations non disponibles")
    
    sites = integration_service.mtg_scraper.get_supported_sites()
    return {"supported_sites": sites}

@app.get("/api/integrations/supported-formats")
async def get_supported_formats():
    """Obtenir la liste des formats support√©s"""
    if not integration_service:
        raise HTTPException(status_code=503, detail="Int√©grations non disponibles")
    
    formats = integration_service.badaro_engine.get_supported_formats()
    return {"supported_formats": formats}

# √âv√©nements de d√©marrage et arr√™t
@app.on_event("startup")
async def startup_event():
    """Initialisation au d√©marrage"""
    logger.info("üöÄ D√©marrage Metalyzr MVP - Backend honn√™te")
    logger.info("üìä API disponible sur http://localhost:8000")
    logger.info("üìö Documentation: http://localhost:8000/docs")
    logger.info("üíæ Donn√©es: Fichiers JSON locaux")
    
    # Initialiser les fichiers de donn√©es
    init_data_files()
    
    # Initialiser les int√©grations
    integrations_ok = init_integrations()
    
    if integrations_ok:
        logger.info("‚úÖ Toutes les int√©grations sont actives")
        logger.info("üîÑ Jiliac Cache: Tournois r√©cents")
        logger.info("üï∑Ô∏è MTG Scraper: Sites support√©s")
        logger.info("üéØ Badaro Engine: Classification d'arch√©types")
    else:
        logger.warning("‚ö†Ô∏è Int√©grations non disponibles - Mode MVP basique")
        logger.info("üìù Installation requise: pip install -r requirements_integrations.txt")

@app.on_event("shutdown")
async def shutdown_event():
    """Nettoyage √† l'arr√™t"""
    logger.info("üõë Arr√™t Metalyzr MVP")
    
    # Fermer les int√©grations
    if integration_service:
        integration_service.close()
        logger.info("‚úÖ Int√©grations ferm√©es")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000, reload=True) 