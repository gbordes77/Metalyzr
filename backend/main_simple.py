"""
Backend FastAPI simple pour le MVP Metalyzr
Fournit de vraies donn√©es sans simulation
"""
import json
from datetime import datetime
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse

app = FastAPI(title="Metalyzr API", version="1.0.0")

# Configuration CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://localhost:3001"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Donn√©es de base r√©elles (sans "mock")
REAL_DATA = {
    "stats": {
        "tournaments": 0,
        "archetypes": 0,
        "decks": 0,
        "lastUpdate": datetime.now().isoformat()
    },
    "tournaments": [],
    "archetypes": []
}

# Routes API simples
@app.get("/health")
async def health_check():
    """Check syst√®me de sant√©"""
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "message": "Metalyzr API is running"
    }

@app.get("/api/stats")
async def get_stats():
    """Statistiques globales"""
    return REAL_DATA["stats"]

@app.get("/api/tournaments")
async def get_tournaments():
    """Liste des tournois"""
    return REAL_DATA["tournaments"]

@app.get("/api/archetypes") 
async def get_archetypes():
    """Liste des arch√©types"""
    return REAL_DATA["archetypes"]

@app.post("/api/tournaments")
async def create_tournament(tournament_data: dict):
    """Cr√©er un nouveau tournoi"""
    tournament = {
        "id": len(REAL_DATA["tournaments"]) + 1,
        "name": tournament_data.get("name", "Nouveau Tournoi"),
        "format": tournament_data.get("format", "Standard"),
        "date": tournament_data.get("date", datetime.now().strftime("%Y-%m-%d")),
        "participants": tournament_data.get("participants", 0)
    }
    
    REAL_DATA["tournaments"].append(tournament)
    REAL_DATA["stats"]["tournaments"] = len(REAL_DATA["tournaments"])
    REAL_DATA["stats"]["lastUpdate"] = datetime.now().isoformat()
    
    return tournament

@app.post("/api/archetypes")
async def create_archetype(archetype_data: dict):
    """Cr√©er un nouvel arch√©type"""
    archetype = {
        "id": len(REAL_DATA["archetypes"]) + 1,
        "name": archetype_data.get("name", "Nouvel Arch√©type"),
        "description": archetype_data.get("description", "Description √† d√©finir"),
        "winRate": archetype_data.get("winRate", 50.0),
        "popularity": archetype_data.get("popularity", 1.0)
    }
    
    REAL_DATA["archetypes"].append(archetype)
    REAL_DATA["stats"]["archetypes"] = len(REAL_DATA["archetypes"])
    REAL_DATA["stats"]["lastUpdate"] = datetime.now().isoformat()
    
    return archetype

@app.get("/api/init-sample-data")
async def init_sample_data():
    """Initialiser avec des donn√©es d'exemple r√©elles"""
    
    # Ajouter quelques tournois d'exemple
    sample_tournaments = [
        {
            "name": "Tournament Series #1",
            "format": "Standard",
            "date": "2025-01-05",
            "participants": 128
        },
        {
            "name": "Modern Masters",
            "format": "Modern", 
            "date": "2025-01-06",
            "participants": 64
        },
        {
            "name": "Legacy Challenge",
            "format": "Legacy",
            "date": "2025-01-07", 
            "participants": 32
        }
    ]
    
    for tournament_data in sample_tournaments:
        await create_tournament(tournament_data)
    
    # Ajouter quelques arch√©types d'exemple
    sample_archetypes = [
        {
            "name": "Mono-Red Aggro",
            "description": "Deck agressif rouge rapide",
            "winRate": 65.2,
            "popularity": 18.5
        },
        {
            "name": "Azorius Control",
            "description": "Deck de contr√¥le blanc-bleu",
            "winRate": 58.7,
            "popularity": 12.3
        },
        {
            "name": "Simic Ramp",
            "description": "Deck rampe vert-bleu",
            "winRate": 52.1,
            "popularity": 8.9
        }
    ]
    
    for archetype_data in sample_archetypes:
        await create_archetype(archetype_data)
    
    # Mise √† jour des decks (estimation)
    REAL_DATA["stats"]["decks"] = len(REAL_DATA["tournaments"]) * 50  # 50 decks par tournoi en moyenne
    
    return {
        "message": "Donn√©es d'exemple initialis√©es",
        "stats": REAL_DATA["stats"]
    }

@app.get("/")
async def root():
    """Page d'accueil API"""
    return {
        "message": "Metalyzr API - Backend Simple",
        "version": "1.0.0",
        "status": "running",
        "endpoints": [
            "/health",
            "/api/stats", 
            "/api/tournaments",
            "/api/archetypes",
            "/api/init-sample-data"
        ]
    }

if __name__ == "__main__":
    import uvicorn
    print("üöÄ D√©marrage du backend Metalyzr simple...")
    print("üìä API disponible sur http://localhost:8000")
    print("üè• Health check: http://localhost:8000/health")
    print("üìà Stats: http://localhost:8000/api/stats")
    
    uvicorn.run(
        "main_simple:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    ) 