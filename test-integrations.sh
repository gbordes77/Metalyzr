#!/bin/bash

echo "üß™ Test des int√©grations r√©elles Metalyzr"
echo "=========================================="

# Variables
SERVER_URL="http://localhost:8000"
BACKEND_DIR="backend"

# V√©rifier si le serveur tourne
echo "1. V√©rification du serveur..."
curl -s "${SERVER_URL}/health" > /dev/null
if [ $? -eq 0 ]; then
    echo "‚úÖ Serveur running"
else
    echo "‚ùå Serveur non accessible - Lancement du serveur..."
    cd $BACKEND_DIR
    python3 main_simple.py &
    SERVER_PID=$!
    cd ..
    echo "‚è≥ Attente du d√©marrage..."
    sleep 5
fi

# Test des endpoints d'int√©gration
echo ""
echo "2. Test des endpoints d'int√©gration..."

# Test du statut des int√©grations
echo "2.1. Statut des int√©grations..."
response=$(curl -s "${SERVER_URL}/api/integrations/status")
if echo "$response" | grep -q "active"; then
    echo "‚úÖ Int√©grations actives"
else
    echo "‚ùå Int√©grations non actives"
    echo "Response: $response"
fi

# Test des sites support√©s
echo "2.2. Sites support√©s pour le scraping..."
response=$(curl -s "${SERVER_URL}/api/integrations/supported-sites")
if echo "$response" | grep -q "mtggoldfish"; then
    echo "‚úÖ Sites de scraping disponibles"
else
    echo "‚ùå Sites de scraping non disponibles"
    echo "Response: $response"
fi

# Test des formats support√©s
echo "2.3. Formats support√©s..."
response=$(curl -s "${SERVER_URL}/api/integrations/supported-formats")
if echo "$response" | grep -q "supported_formats"; then
    echo "‚úÖ Formats support√©s disponibles"
else
    echo "‚ùå Formats non disponibles"
    echo "Response: $response"
fi

# Test des tournois r√©cents
echo "2.4. Tournois r√©cents..."
response=$(curl -s "${SERVER_URL}/api/integrations/tournaments/recent?format_name=Modern&days=7")
if echo "$response" | grep -q "tournaments"; then
    echo "‚úÖ API tournois r√©cents fonctionne"
else
    echo "‚ùå API tournois r√©cents ne fonctionne pas"
    echo "Response: $response"
fi

# Test d'analyse m√©ta
echo "2.5. Analyse m√©ta..."
response=$(curl -s -X POST "${SERVER_URL}/api/integrations/meta/analysis" \
    -H "Content-Type: application/json" \
    -d '{"format": "Modern", "days": 7}')
if echo "$response" | grep -q "total_decks"; then
    echo "‚úÖ API analyse m√©ta fonctionne"
else
    echo "‚ùå API analyse m√©ta ne fonctionne pas"
    echo "Response: $response"
fi

# Test de scraping (avec une URL factice)
echo "2.6. Test de scraping..."
response=$(curl -s -X POST "${SERVER_URL}/api/integrations/scrape/deck" \
    -H "Content-Type: application/json" \
    -d '{"url": "https://www.mtggoldfish.com/archetype/test", "format": "Modern"}')
if echo "$response" | grep -q "error\|failed\|detail"; then
    echo "‚ö†Ô∏è Scraping √©choue (normal avec URL test)"
else
    echo "‚úÖ API scraping r√©pond"
fi

# Test de recherche par arch√©type
echo "2.7. Recherche par arch√©type..."
response=$(curl -s "${SERVER_URL}/api/integrations/tournaments/search?archetype=Burn&format_name=Modern")
if echo "$response" | grep -q "tournaments"; then
    echo "‚úÖ API recherche par arch√©type fonctionne"
else
    echo "‚ùå API recherche par arch√©type ne fonctionne pas"
    echo "Response: $response"
fi

# Test des statistiques (avec int√©grations)
echo "2.8. Statistiques avec int√©grations..."
response=$(curl -s "${SERVER_URL}/api/stats")
if echo "$response" | grep -q "integrations"; then
    echo "‚úÖ Statistiques avec int√©grations disponibles"
else
    echo "‚ùå Statistiques avec int√©grations non disponibles"
    echo "Response: $response"
fi

# Test des endpoints existants
echo ""
echo "3. Test des endpoints existants..."

# Test CRUD tournois
echo "3.1. Test CRUD tournois..."
response=$(curl -s "${SERVER_URL}/api/tournaments")
if echo "$response" | grep -q "tournaments"; then
    echo "‚úÖ API tournois (CRUD) fonctionne"
else
    echo "‚ùå API tournois (CRUD) ne fonctionne pas"
fi

# Test CRUD arch√©types
echo "3.2. Test CRUD arch√©types..."
response=$(curl -s "${SERVER_URL}/api/archetypes")
if echo "$response" | grep -q "archetypes"; then
    echo "‚úÖ API arch√©types (CRUD) fonctionne"
else
    echo "‚ùå API arch√©types (CRUD) ne fonctionne pas"
fi

# Arr√™ter le serveur si on l'a lanc√©
if [ ! -z "$SERVER_PID" ]; then
    echo ""
    echo "4. Arr√™t du serveur de test..."
    kill $SERVER_PID
    echo "‚úÖ Serveur arr√™t√©"
fi

echo ""
echo "üéâ Tests termin√©s !"
echo ""
echo "R√©sum√© des fonctionnalit√©s test√©es :"
echo "‚úÖ Statut des int√©grations"
echo "‚úÖ Sites de scraping support√©s"
echo "‚úÖ Formats support√©s"
echo "‚úÖ Tournois r√©cents avec arch√©types"
echo "‚úÖ Analyse m√©ta"
echo "‚úÖ Recherche par arch√©type"
echo "‚úÖ Statistiques avec int√©grations"
echo "‚úÖ CRUD tournois existant"
echo "‚úÖ CRUD arch√©types existant"
echo ""
echo "Pour une utilisation compl√®te :"
echo "1. Lancer le serveur: cd backend && python3 main_simple.py"
echo "2. Ouvrir la doc: http://localhost:8000/docs"
echo "3. Tester les nouvelles API dans l'interface Swagger" 