#!/usr/bin/env python3
"""
Script de test pour l'int√©gration MTGODecklistCache dans Metalyzr
Valide que le cache fonctionne correctement et fournit des donn√©es r√©elles
"""
import asyncio
import sys
import time
from pathlib import Path

# Ajouter le r√©pertoire backend au path
sys.path.append(str(Path(__file__).parent / "backend"))

from cache_manager import mtgo_cache_manager

async def test_cache_integration():
    """Test complet de l'int√©gration cache"""
    print("üß™ Test d'int√©gration MTGODecklistCache")
    print("=" * 50)
    
    start_time = time.time()
    
    try:
        # 1. Test d'initialisation
        print("\n1Ô∏è‚É£ Test d'initialisation du cache...")
        async with mtgo_cache_manager as cache:
            success = await cache.initialize()
            
            if success:
                print("‚úÖ Cache initialis√© avec succ√®s")
            else:
                print("‚ùå √âchec d'initialisation du cache")
                return False
            
            # 2. Test des statistiques
            print("\n2Ô∏è‚É£ Test des statistiques du cache...")
            stats = await cache.get_cache_stats()
            print(f"üìä Statistiques:")
            print(f"   - Tournois: {stats.get('total_tournaments', 0)}")
            print(f"   - Taille cache: {stats.get('cache_size_mb', 0)} MB")
            print(f"   - Derni√®re MAJ: {stats.get('last_update', 'N/A')}")
            print(f"   - Formats: {stats.get('formats', {})}")
            print(f"   - Plage dates: {stats.get('date_range', {})}")
            
            # 3. Test r√©cup√©ration tournois Modern
            print("\n3Ô∏è‚É£ Test r√©cup√©ration tournois Modern...")
            modern_tournaments = await cache.get_tournaments(
                format_filter="Modern",
                limit=5
            )
            print(f"üìã {len(modern_tournaments)} tournois Modern trouv√©s")
            
            for i, tournament in enumerate(modern_tournaments[:3]):
                print(f"   {i+1}. {tournament.get('name', 'Sans nom')} "
                      f"({tournament.get('date', 'N/A')}) - "
                      f"{len(tournament.get('decks', []))} decks")
            
            # 4. Test r√©cup√©ration tournois Standard
            print("\n4Ô∏è‚É£ Test r√©cup√©ration tournois Standard...")
            standard_tournaments = await cache.get_tournaments(
                format_filter="Standard", 
                limit=3
            )
            print(f"üìã {len(standard_tournaments)} tournois Standard trouv√©s")
            
            # 5. Test des arch√©types
            print("\n5Ô∏è‚É£ Test d√©tection arch√©types...")
            all_archetypes = set()
            
            for tournament in modern_tournaments[:3]:
                for deck in tournament.get("decks", []):
                    archetype = deck.get("archetype")
                    if archetype and archetype != "Unknown":
                        all_archetypes.add(archetype)
            
            print(f"üéØ {len(all_archetypes)} arch√©types uniques d√©tect√©s:")
            for archetype in sorted(all_archetypes)[:10]:
                print(f"   - {archetype}")
            
            # 6. Test de synchronisation
            print("\n6Ô∏è‚É£ Test de synchronisation...")
            if len(modern_tournaments) < 5:
                print("‚ö†Ô∏è Peu de donn√©es, test de sync...")
                sync_success = await cache.sync_from_remote()
                if sync_success:
                    print("‚úÖ Synchronisation r√©ussie")
                else:
                    print("‚ùå √âchec de synchronisation")
            else:
                print("‚úÖ Cache d√©j√† bien aliment√©, pas de sync n√©cessaire")
    
    except Exception as e:
        print(f"‚ùå Erreur durant les tests: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    elapsed = time.time() - start_time
    print(f"\nüéâ Tests termin√©s en {elapsed:.2f}s")
    return True

async def test_api_integration():
    """Test l'int√©gration avec l'API"""
    print("\nüîó Test int√©gration API...")
    
    try:
        # Simuler le chargement de donn√©es dans l'API
        import sys
        sys.path.append("backend")
        from main_simple import load_cache_data, REAL_DATA
        
        # Charger les donn√©es
        await load_cache_data()
        
        print(f"‚úÖ API integration:")
        print(f"   - Tournois charg√©s: {len(REAL_DATA['tournaments'])}")
        print(f"   - Arch√©types: {len(REAL_DATA['archetypes'])}")
        print(f"   - Decks total: {REAL_DATA['stats']['decks']}")
        print(f"   - Cache status: {REAL_DATA['stats']['cache_status']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test API: {e}")
        return False

def main():
    """Fonction principale"""
    print("üöÄ Lancement des tests d'int√©gration Metalyzr + MTGODecklistCache")
    
    async def run_all_tests():
        # Test 1: Cache
        cache_ok = await test_cache_integration()
        
        # Test 2: API
        api_ok = await test_api_integration()
        
        print("\n" + "=" * 50)
        print("üìã R√âSULTATS FINAUX:")
        print(f"   Cache Integration: {'‚úÖ OK' if cache_ok else '‚ùå √âCHEC'}")
        print(f"   API Integration: {'‚úÖ OK' if api_ok else '‚ùå √âCHEC'}")
        
        if cache_ok and api_ok:
            print("\nüéâ TOUS LES TESTS PASSENT!")
            print("üöÄ Metalyzr est pr√™t avec des donn√©es r√©elles!")
            return 0
        else:
            print("\n‚ùå CERTAINS TESTS √âCHOUENT")
            print("üîß V√©rifiez la configuration et la connectivit√©")
            return 1
    
    return asyncio.run(run_all_tests())

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code) 